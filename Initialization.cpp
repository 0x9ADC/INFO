Перед использованием объекта , ему должно быть присвоено значение. C++ предлагает множество типов записи для выражений инициализации, например [int c = 2;] , 
универсальную форму, основанную на записи информации в фигурные скобки:
double d1 = 2.3; // Инициализация d1 значением 2.3
double d2 = {2.3}; // Инициализация d1 значением 2.3
double d3 {2.3}; // Инициализация d1 значением 2.3

Комплексные значения // Для комплексных чисел в C++ предусмотрен шаблонный класс std::complex. 
// Параметр его шаблона определяет тип коэффициентов, соответствующих действительной и мнимой части комплексного числа
complex<double> z = 1;
complex<double> z2 {d1,d2}; // Комплексное число с компонентами double
complex<double> z3 = {d1,d2}; // = при { ... } не обязателен!
vector<int> v {1,2,3,4,5,6}; // Вектор значений int
Применение = традиционно и восходит к C , но если у вас есть сомнения,используйте универсальную форму со списком в фигурных скобках { ... }
Это спасет вас от преобразований с потерей информации.
int first = 7.8; // Целочисленное значени не может быть дробным! В консольке будет 7
int second = {7.8}; // Ошибка! Преобразование числа с плавающей точкой( Double , Float , Long Double ... ) в целое.
К сожалению , часто используют ненадежные преобразования, которые теряют информацию, такие как double в int или int в char
  #include <iostream>
  int main()
{
 int x = 40;
 char h;
  std::cout << (char)h; // Почему выводиться определенный символ? Вот объяснение: https://www.industrialnets.ru/files/misc/ascii.pdf
  Константы :) - очень интересная тема. Не могут быть оставлены неинициализированными , а переменные могут оставаться неинициализированными только в крайне редких случаях.
    Не вводите в программу имя, пока у вас не будет для него подходящего значения // Честно говоря и я забиваю на это :D
    При определении  переменной вам не нужно явно указывать тип , если он может быть выведен из инициализатора:
  auto b = true; // Boolean
  auto c = 'c'; // Char
  auto d = 15; // Integer
  auto e = 1.2; // Double
  auto f = sqrt(y); // z имеет тип, возвращаемый функцией sqrt(y)
  auto g {true} // Boolean
  Мы используем auto там, где у нас нет конкретной причины упоминать тип явно. Конкретные причины включают следующее:
  Определение находится в большой  области видимости , где хотелось бы , чтобы тип был четко виден читателям кода.
  Мы хотим точно указать диапазон или точность переменной (Например: Double | Float)
  
  Используя auto , мы избегаем избыточности и записи длинных имен типов. Это особенно важно в обобщенном программировании , в котором определение точного типа объекта
  может быть трудным для программиста , а имена типов могут быть довольно длинными.
}
